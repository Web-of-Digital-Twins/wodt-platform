openapi: 3.0.0
servers:
  - description: WoDT Platform API
    url: http://localhost:<port>
info:
  description: This is the API of exposed by the WoDT Platform
  version: 1.0.0
  title: WoDT Platform API
  contact:
    email: andrea.giulianelli7@unibo.it
  license:
    name: Apache 2.0 License
    url: 'https://www.apache.org/licenses/LICENSE-2.0'

tags:
  - name: Ecosystem Management Interface API
    description: This is the API exposed by the Ecosystem Management Interface.
  - name: WoDT Platform Interface API
    description: This is the API exposed by the WoDT Platform Interface for Consumers.

paths:
  /wodt:
    get:
      tags:
        - WoDT Platform Interface API
      summary: obtain the complete Platform Knowledge Graph
      operationId: getPlatformKnowledgeGraph
      description: obtain the complete view over the Platform Knowledge Graph
      responses:
        '200':
          description: current view over the Platform Knowledge Graph
          content:
            text/turtle:
              schema:
                type: string
        '204':
          description: Platform Knowledge Graph currently empty
    post:
      tags:
        - Ecosystem Management Interface API
      summary: register a new Digital Twin to the WoDT Platform
      operationId: registerDigitalTwin
      description: Register a new Digital Twin to the WoDT Platform
      responses:
        '202':
          description: registration request accepted
        '400':
          description: the Digital Twin Description was not structured properly or its mime type was not supported
        '409':
          description: the Digital Twin is already registered to the WoDT Platform
      requestBody:
        content:
          application/td+json:
            schema:
              example: |
                {
                  "@context": "https://www.w3.org/2022/wot/td/v1.1",
                  "id": "http://localhost:3000",
                  "@type": [
                    "https://saref.etsi.org/core/Actuator",
                    "https://w3id.org/rec/Lamp"
                  ],
                  "version": {
                    "instance": "1.2.3",
                    "model": "1.0.0"
                  },
                  "https://purl.org/wodt/physicalAssetId": "lampPA",
                  "securityDefinitions": {
                    "nosec_sc": {
                      "scheme": "nosec"
                    }
                  },
                  "security": "nosec_sc",
                  "properties": {
                    "availableActions": {
                      "@type": "https://purl.org/wodt/AvailableActions",
                      "readOnly": true
                    },
                    "luminosity": {
                      "https://purl.org/wodt/domainTag": "https://purl.org/onto/LuminosityFlux",
                      "https://purl.org/wodt/augmentedInteraction": false,
                      "readOnly": true
                    },
                    "illuminance": {
                      "https://purl.org/wodt/domainTag": "https://purl.org/onto/Illuminance",
                      "https://purl.org/wodt/augmentedInteraction": false,
                      "readOnly": true
                    },
                    "isInRoom": {
                      "https://purl.org/wodt/domainTag": "https://brickschema.org/schema/Brick#hasLocation",
                      "readOnly": true
                    }
                  },
                  "actions": {
                    "switch": {
                      "https://purl.org/wodt/domainTag": "https://purl.org/onto/SwitchCommand",
                      "https://purl.org/wodt/augmentedInteraction": false,
                      "forms": [
                        {
                          "href": "http://localhost:3000/action/switch"
                        }
                      ]
                    }
                  },
                  "forms": [
                    {
                      "href": "ws://localhost:3000/dtkg",
                      "subprotocol": "websocket",
                      "op": "observeallproperties"
                    }
                  ],
                  "links": [
                    {
                      "href": "https://raw.githubusercontent.com/Web-of-Digital-Twins/dtd-conceptual-model/refs/heads/main/implementations/wot/dtd-thing-model.tm.jsonld",
                      "rel": "type",
                      "type": "application/tm+json"
                    },
                    {
                      "href": "http://localhost:3000/dtkg",
                      "rel": "https://purl.org/wodt/dtkg"
                    }
                  ]
                }
        description: the Digital Twin Description implemented with a Thing Description following the abstract conceptual model mappings

  /wodt/{digitalTwinUri}:
    get:
      tags:
        - WoDT Platform Interface API
      summary: obtain the current local view over the interested DT DTKG
      operationId: getLocalDigitalTwinKnowledgeGraph
      description: Obtain the current local view over the interested DT DTKG
      parameters:
        - in: path
          name: digitalTwinUri
          description: the URI of the registered WoDT Digital Twin for which the Digital Twin Knowledge Graph is requested
          example: http://example.it/dt
          required: true
          schema:
            type: string
      responses:
        '200':
          description: local cached view over the Digital Twin Knowledge Graph
          content:
            text/turtle:
              schema:
                type: string

        '204':
          description: the WoDT Digital Twin is registered but its Digital Twin Knowledge Graph is currently empty
        '400':
          description: the Digital Twin URI path parameter is not structured properly
        '404':
          description: the interested Digital Twin is not registered to the WoDT Digital Twins Platform
    delete:
      tags:
        - Ecosystem Management Interface API
      summary: api to signal the deletion of a registered WoDT Digital Twin
      operationId: deleteDigitalTwin
      description: a registered WoDT Digital Twin use this api to signal its deletion from the ecosystem
      parameters:
        - in: path
          name: digitalTwinUri
          description: the URI of the registered WoDT Digital Twin to delete
          example: http://example.it/dt
          required: true
          schema:
            type: string
      responses:
        '202':
          description: deletion request accepted
        '400':
          description: the Digital Twin URI is not specified correctly
        '404':
          description: Digital Twin not registered

  /wodt/sparql:
    post:
      tags:
        - WoDT Platform Interface API
      summary: perform a SPARQL Query over the Platform Knowledge Graph
      operationId: queryPlatformKnowledgeGraph
      description: perform a SPARQL Query over the Platform Knowledge Graph using the SPARQL Protocol
      responses:
        '200':
          description: valid query, return the results in the specified mime type following the SPARQL Protocol
        '400':
          description: the query is not structured properly or it is specified with the wrong content-type
      requestBody:
        content:
          application/sparql-query:
            schema:
              type: string
              example: |
                PREFIX healthcare: <https://healthcareontology.com/ontology#>
                PREFIX smartcity: <https://smartcityontology.com/ontology#>
                
                SELECT ?fuelLevel ?isBusy ?isApproaching
                WHERE {
                  <http://localhost:4000/wodt/https://example.com/dt> healthcare:hasFuelLevel ?fuelLevel .
                  <http://localhost:4000/wodt/https://example.com/dt> healthcare:isBusy ?isBusy .
                  <http://localhost:4000/wodt/https://example.com/dt> smartcity:isApproaching ?isApproaching .
                }
        description: SPARQL Query to perform

  /wodt/directory:
    get:
      tags:
        - WoDT Platform Interface API
      summary: get the Digital Twins that are associated with a particular Physical Asset identifier
      operationId: multiModelDirectory
      description: get the Digital Twins that are associated with a particular Physical Asset identifier
      parameters:
        - in: query
          name: pa
          description: the Physical Asset identifier
          required: true
          schema:
            type: string
            example: AM3030T
      responses:
        '200':
          description: the list of Digital Twins URI
          content:
            application/json:
              schema:
                example: [ "https://example.it/dt", "http://second-example.it/dt" ]
        '204':
          description: no registered WoDT Digital Twin is associated with that Physical Asset identifier
        '400':
          description: the request is malformed, missed Physical Asset identifier

  /wodt/dts:
    get:
      tags:
        - WoDT Platform Interface API
      summary: get the list of Digital Twins registered to the WoDT Platform
      operationId: dtsCatalog
      description: get the list of Digital Twins registered to the WoDT Platform
      responses:
        '200':
          description: the list of Digital Twins URI
          content:
            application/json:
              schema:
                example: [ "https://example.it/dt", "http://second-example.it/dt" ]
        '204':
          description: the WoDT Platform does not have any registered WoDT Digital Twin
